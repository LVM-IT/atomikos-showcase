package de.lvm.demo.bitronix.jms;

import com.atomikos.icatch.jta.UserTransactionManager;
import com.atomikos.jms.AtomikosConnectionFactoryBean;
import de.lvm.demo.BitronixTools;
import org.apache.activemq.ActiveMQXAConnectionFactory;
import org.junit.Test;

import javax.jms.*;
import java.util.Date;

/**
 * Just to test that JMS with activemq works as expected with atomikos
 */
public class JmsDoubleOpenTest
{

    @Test
    public void sendMessage() throws Exception
    {
        // connect to local (docker) activemq
        ConnectionFactory cf = BitronixTools.buildBitronixActiveMQConnectionFactoryBean();

        final UserTransactionManager utm = new UserTransactionManager();
        utm.init();
        utm.begin();

        Connection connection = cf.createConnection();
        connection.start();

        Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);

        final Destination destination = session.createQueue("TEST.SHOWCASE");
        final MessageProducer producer = session.createProducer(destination);
        producer.setDeliveryMode(DeliveryMode.PERSISTENT);

        final String text = "Sample message from thread: " + Thread.currentThread().getName() + " (atomikos) : " + new Date();
        final TextMessage message = session.createTextMessage(text);

        producer.send(message);
        producer.close();

        session.close();
        //new session, same connection:  WARN | atomikos xa session proxy for resource activemq: Session was closed already - calling createQueue is no longer allowed.
        session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);

        final Destination destination2 = session.createQueue("TEST.SHOWCASE");
        final MessageProducer producer2 = session.createProducer(destination2);
        producer2.setDeliveryMode(DeliveryMode.PERSISTENT);

        final String text2 = "Sample message from thread: " + Thread.currentThread().getName() + " (atomikos/2nd) : " + new Date();
        final TextMessage message2 = session.createTextMessage(text2);

        producer2.send(message2);
        producer2.close();

        session.close();
        connection.close();

        utm.commit();
        utm.close();
    }

    
    
    
    //this works
    //@Test
    public void sendTwoTimesWithNewConnection() throws Exception
    {
        // connect to local (docker) activemq
        final XAConnectionFactory xacf = new ActiveMQXAConnectionFactory("tcp://localhost:61616?jms.useAsyncSend=false");
        final AtomikosConnectionFactoryBean cf = new AtomikosConnectionFactoryBean();
        cf.setUniqueResourceName("activemq");
        cf.setXaConnectionFactory(xacf);
        cf.setPoolSize(1);

        final UserTransactionManager utm = new UserTransactionManager();
        utm.init();
        utm.begin();

        Connection connection = cf.createConnection();
        connection.start();

        final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);

        final Destination destination = session.createQueue("TEST.SHOWCASE");
        final MessageProducer producer = session.createProducer(destination);
        producer.setDeliveryMode(DeliveryMode.PERSISTENT);

        final String text = "Sample message from thread: " + Thread.currentThread().getName() + " (atomikos) : " + new Date();
        final TextMessage message = session.createTextMessage(text);

        producer.send(message);
        producer.close();

        session.close();
        connection.close();

        //second
        connection = cf.createConnection();
        connection.start();

        final Session session2 = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);

        final Destination destination2 = session2.createQueue("TEST.SHOWCASE");
        final MessageProducer producer2 = session2.createProducer(destination2);
        producer2.setDeliveryMode(DeliveryMode.PERSISTENT);

        final String text2 = "Sample message from thread: " + Thread.currentThread().getName() + " (atomikos/2nd) : " + new Date();
        final TextMessage message2 = session2.createTextMessage(text2);

        producer2.send(message2);
        producer2.close();

        session2.close();
        connection.close();

        utm.commit();
        utm.close();
    }
}
